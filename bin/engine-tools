#!/usr/bin/env node

// Dependencies
var EngineTools = require("../lib")
  , Logger = require("bug-killer")
  , CLP = require("clp")
  , Pack = require("../package.json")
  ;

// Configure logger
Logger.config.logLevel = 4;
Logger.config.displayDate = false;

// Create the clp parser
var parser = new CLP({
    name: "Engine Tools"
  , exe: Pack.name
  , version: Pack.version
  , docs_url: Pack.homepage
  , notes: "Make sure that you read the jillix Engine docs."
  + "\nThis tool uses the $ENGINE_APPS env variable"
  + "\nrepresenting the absolute path to the Engine apps directory."
});

// Create the CLP options
var methodOpt = new CLP.Option(["m", "method"], "The method to run.", "method")
  , argsOpt = new CLP.Option(["a", "args"], "The arguments passed to the provided method.", "args", "")
  , listOpt = new CLP.Option({
        aliases: ["l", "list"]
      , description: "List the available methods."
      , handler: function () {
            Logger.log("Available methods in engine-tools:", "info");
            console.log(Object.keys(EngineTools.__proto__).filter(function (c) {
                return typeof EngineTools[c] === "function";
            }).join("\n"));
            process.exit(0);
        }
    })
  ;

// Method option
parser.addOption(methodOpt);
parser.addExample("engine-tools -m projectPack -a foo # Get the package.json of foo");

// Args option
parser.addOption(argsOpt);
parser.addExample("engine-tools -m installModule -a \"foo bar\" # Install bar in foo");

// List option
parser.addOption(listOpt);
parser.addExample("engine-tools -l # list available methods");

// Process the arguments
parser.process();

// Check the method value
var method = methodOpt.value;
if (!method) {
    return console.log(parser.displayHelp());
}

// Check if the method is valid
if (typeof EngineTools[method] !== "function") {
    return Logger.log(method + " is not a valid method.", "error");
}

var args = argsOpt.value.match(/"[^"]+"|'[^']+'|\S+/g).filter(Boolean);
args.push(function (err, data) {
    if (err) {
        return Logger.log(err, "error");
    }
    console.log(JSON.stringify(data, null, 4));
});

var res = EngineTools[method].apply(EngineTools, args);
if (res !== undefined && typeof res !== "object") {
    console.log(res);
}
